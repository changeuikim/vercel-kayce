// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

/*
  prisma-client-js는 Prisma ORM을 통해 DB 쿼리를 수행하는 TypeScript/JavaScript 클라이언트를 생성합니다. 이는 JPA에서 EntityManager나 Repository와 유사한 역할을 합니다.
*/
generator client {
  provider = "prisma-client-js"
}

/*
  데이터베이스 연결 정보를 정의합니다.
  DATABASE_URL 환경 변수를 통해 PostgreSQL 데이터베이스에 연결합니다.
*/
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* 
  dev 실행
  npx dotenv -e .env.local -- prisma migrate dev --name init
  npx prisma generate
*/

/* 
  prod 실행
  npx prisma migrate dev --name init
  npx prisma generate
  npx prisma db pull
  npx prisma generate
*/

/*
주요 필드
  id: 기본 키. 자동 증가 설정.
  createdAt: 생성 시점 자동 설정.
  updatedAt: 수정 시점 자동 갱신.

연관 관계
  categories: 다대다 관계(Post와 Category 간).
  tags: 다대다 관계(Post와 Tag 간).
  likes: 일대다 관계(Post와 Like 간).

JPA의 @Entity와 동일하며, 다대다 관계는 연결 테이블이 필요합니다.
*/
model Post {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categories  Category[] @relation("PostCategories")
  tags        Tag[]     @relation("PostTags")
  likes       Like[]
}

/*
  name 필드는 고유값으로 설정.
  subscriptions 필드는 구독자를 관리하는 일대다 관계.
*/
model Category {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  posts         Post[]         @relation("PostCategories")
  subscriptions CategorySubscription[]
}

/*
  name 필드는 고유값으로 설정.
  subscriptions 필드는 구독자를 관리하는 일대다 관계.
*/
model Tag {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  posts         Post[]         @relation("PostTags")
  subscriptions TagSubscription[]
}

/*
  사용자는 좋아요, 카테고리 구독, 태그 구독 정보를 가집니다.
  email 필드는 고유값으로 설정되어 로그인 및 인증에 사용됩니다.
  -> email은 추후에 각 소셜 로그인의 액세스 코드에서 제공하는 내부 식별자로 대체 예정
*/
model User {
  id                  Int                   @id @default(autoincrement())
  name                String
  email               String                @unique
  likes               Like[]
  categorySubscriptions CategorySubscription[]
  tagSubscriptions    TagSubscription[]
}

/*
  사용자와 게시글 간의 좋아요 관계를 표현.
  복합 고유 제약(@@unique)으로 동일 사용자가 동일 게시글에 좋아요를 중복으로 누르지 못하게 제한.
*/
model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

/*
  사용자의 구독 정보를 관리하는 연결 테이블.
  복합 고유 제약(@@unique)으로 동일 사용자가 동일 카테고리를 중복 구독하지 못하게 제한.
*/
model CategorySubscription {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt  DateTime @default(now())

  @@unique([userId, categoryId])
}

/*
  사용자의 구독 정보를 관리하는 연결 테이블.
  복합 고유 제약(@@unique)으로 동일 사용자가 동일 태그를 중복 구독하지 못하게 제한.
*/
model TagSubscription {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime @default(now())

  @@unique([userId, tagId])
}