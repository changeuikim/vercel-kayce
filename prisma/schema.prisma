// Prisma Schema for Social Login Users and Admins with Scoped Permissions

// # 개발 환경 (development)
// cp .env.development.local .env
// npx prisma migrate dev

// # 프로덕션 환경 (production)
// cp .env.production.local .env
// npx prisma migrate dev

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 인증 공급자 정의
enum AuthProvider {
  GITHUB
  GOOGLE
  KAKAO
  NAVER
}

// 소셜 로그인 사용자
// Spring Data JPA의 @Entity와 비슷한 역할을 합니다.
model User {
  id              String        @id @default(cuid()) // 고유 ID, CUID 방식으로 생성
  provider        AuthProvider                       // 인증 공급자
  providerIdHash  String        @unique              // 해싱된 공급자 ID
  createdAt       DateTime      @default(now())      // 생성 일자
  updatedAt       DateTime      @updatedAt           // 수정 일자
  isDeleted       Boolean       @default(false)      // 소프트 삭제 여부
  deletedAt       DateTime?                          // 삭제 일자  

  // 관계 정의: JwtBlacklist 모델과 1:N 관계
  blacklistedTokens UserJwtBlacklist[]

  @@index([providerIdHash])
}

// 사용자용 JWT 블랙리스트
model UserJwtBlacklist {
  id          String    @id @default(cuid())        // 고유 ID
  token       String    @unique                     // JWT 토큰
  userId      String                                // 소유 사용자 ID
  expiresAt   DateTime                              // 만료 시간
  createdAt   DateTime   @default(now())            // 생성 일자

  // 관계 정의: User와 N:1 관계
  user        User      @relation(fields: [userId], references: [id])

  @@index([token, expiresAt])
}

// 관리자 역할 정의
enum AdminRole {
  SUPER_ADMIN    // 최상위 관리자
  BOARD_ADMIN    // 특정 게시판 관리자
}


// 관리자 엔티티
model Admin {
  id            String        @id @default(cuid())    // 고유 ID
  username      String        @unique                 // 관리자 로그인 ID
  password      String                                // 해싱된 비밀번호
  role          AdminRole     @default(SUPER_ADMIN)   // 관리자 역할
  createdAt     DateTime      @default(now())         // 생성 일자
  updatedAt     DateTime      @updatedAt              // 수정 일자
  isDeleted     Boolean       @default(false)         // 소프트 삭제 여부
  deletedAt     DateTime?                             // 삭제 일자     

  // 관계 정의: AdminPermission과 1:N 관계
  permissions   AdminPermission[]
  blacklistedTokens AdminJwtBlacklist[]

  @@index([username])
}

// 리소스 엔티티
model Resource {
  id            String            @id @default(cuid())  // 고유 ID
  name          String            @unique               // 리소스 이름
  description   String?                                 // 리소스 설명
  createdAt     DateTime          @default(now())       // 생성 일자
  updatedAt     DateTime          @updatedAt            // 수정 일자
  isDeleted     Boolean           @default(false)       // 소프트 삭제 여부
  deletedAt     DateTime?                               // 삭제 일자       

  // 관계 정의: AdminPermission과 1:N 관계
  permissions AdminPermission[]
}

// 관리자 권한 정의 (게시판별 CRUD 권한)
model AdminPermission {
  id          String       @id @default(cuid())        // 고유 ID
  adminId     String                                   // 소유 관리자 ID
  resourceId  String                                   // 대상 리소스
  canCreate   Boolean      @default(false)             // 생성 권한
  canRead     Boolean      @default(false)             // 읽기 권한
  canUpdate   Boolean      @default(false)             // 수정 권한
  canDelete   Boolean      @default(false)             // 삭제 권한
  createdAt   DateTime     @default(now())             // 생성 일자
  updatedAt   DateTime     @updatedAt                  // 수정 일자

  // 관계 정의: Admin과 N:1 관계
  admin     Admin       @relation(fields: [adminId], references: [id])
  resource    Resource   @relation(fields: [resourceId], references: [id])

  @@index([adminId, resourceId])
}

// 관리자용 JWT 블랙리스트
model AdminJwtBlacklist {
  id          String    @id @default(cuid())         // 고유 ID
  token       String    @unique                     // JWT 토큰
  adminId     String                                // 소유 관리자 ID
  expiresAt   DateTime                              // 만료 시간
  createdAt   DateTime   @default(now())            // 생성 일자

  // 관계 정의: Admin과 N:1 관계
  admin       Admin     @relation(fields: [adminId], references: [id])

  @@index([token, expiresAt])
}
