# Codegen은 GraphQL 스키마로부터 타입 및 리졸버 코드를 생성하여 개발 생산성을 높이는 도구입니다.

# schema: GraphQL 스키마 경로
# GraphQL 스키마 파일의 경로를 지정합니다.
# 이 파일은 GraphQL 타입 정의(type, Query, Mutation, Subscription)와 스칼라 타입, 입력 타입 등을 포함합니다.
# Codegen은 이 스키마를 분석하여 타입스크립트 타입과 리졸버를 생성합니다.
schema: src/graphql/schema.graphql

# generates: 출력 파일 설정
generates:
    # src/graphql/generated/types.ts: 생성된 코드의 출력 경로입니다. 이 파일은 GraphQL 스키마 기반으로 생성된 타입스크립트 타입 및 리졸버 타입을 포함합니다.
    src/graphql/generated/types.ts:
        # plugins: typescript: GraphQL 스키마에서 TypeScript 타입을 생성합니다.
        # plugins: typescript-resolvers: GraphQL 리졸버 타입을 생성합니다. 리졸버는 GraphQL API의 비즈니스 로직을 구현하는 함수입니다.
        plugins:
            - typescript
            - typescript-resolvers
        # config: contextType: 리졸버 함수에서 사용할 컨텍스트 객체의 타입을 지정합니다. ../context 파일에서 Context 타입을 가져온다는 의미입니다.
        # config: mappers: GraphQL 타입과 Prisma 모델 간의 매핑을 정의합니다. 이 설정을 통해 GraphQL 리졸버에서 Prisma 모델을 직접 반환하거나 사용하는 것이 가능해집니다.
        # config: scalars: GraphQL 스칼라 타입 DateTime을 TypeScript의 Date 타입으로 매핑합니다. GraphQL 기본 스칼라(String, Int, Boolean, ID 등) 외의 사용자 정의 스칼라 타입을 TypeScript 타입으로 지정할 때 사용됩니다.
        config:
            contextType: ../context#Context
            mappers:
                Post: '@prisma/client#Post'
                Category: '@prisma/client#Category'
                Tag: '@prisma/client#Tag'
                User: '@prisma/client#User'
                Like: '@prisma/client#Like'
            scalars:
                DateTime: Date
# Codegen의 동작 방식
# 1. GraphQL 스키마 분석:
# schema.graphql 파일에서 정의된 모든 타입, 쿼리, 뮤테이션, 서브스크립션, 스칼라 등을 분석합니다.

# 2. 타입스크립트 타입 생성:
# typescript 플러그인을 사용해 GraphQL 타입과 동일한 구조의 TypeScript 타입을 생성합니다.
# 예: GraphQL 타입 Post → TypeScript 타입 Post.

# 3. 리졸버 타입 생성:
# typescript-resolvers 플러그인을 사용해 리졸버 함수의 타입 정의를 생성합니다.
# 예: Query.posts 리졸버는 Post[]를 반환해야 한다는 타입 정의.

# 4. Prisma 모델과 매핑:
# mappers 설정에 따라 GraphQL 타입과 Prisma 클라이언트의 모델을 연결합니다.
# 리졸버에서 Prisma 모델을 반환하거나 사용할 때 자동으로 타입이 일치합니다.
