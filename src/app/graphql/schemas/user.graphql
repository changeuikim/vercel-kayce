# 1. 유저 데이터
type User {
    id: ID!
    createdAt: DateTime!
    isDeleted: Boolean!
    deletedAt: DateTime
}

# 2. 필터
# 유저 데이터를 필터링하기 위한 조건을 정의
input UserFilter {
    isDeleted: Boolean
    createdAtBefore: DateTime
    createdAtAfter: DateTime
    deletedAtBefore: DateTime
    deletedAtAfter: DateTime
    AND: [UserFilter!]
    OR: [UserFilter!]
}

# 3. 정렬
# 정렬 가능한 필드를 열거형으로 정의
enum UserSortableField {
    CREATED_AT
    DELETED_AT
}

# 정렬 방향을 열거형으로 정의
enum SortDirection {
    ASC
    DESC
}

# 유저 데이터의 정렬 조건을 지정
input UserSort {
    field: UserSortableField!
    direction: SortDirection!
}

# 4. 페이지네이션
# Relay 스타일 페이지네이션에서 단일 데이터 노드와 커서를 포함하는 구조
type UserEdge {
    node: User! # 유저 데이터를 나타내는 User 객체
    cursor: String! # 현재 데이터의 위치를 나타내는 커서
}

# 페이지네이션의 메타데이터를 제공
type PageInfo {
    hasNextPage: Boolean! # 다음 페이지가 있는지 여부
    hasPreviousPage: Boolean! # 이전 페이지가 있는지 여부
    startCursor: String # 현재 페이지의 첫 번째 데이터 커서
    endCursor: String # 현재 페이지의 마지막 데이터 커서
}

# 클라이언트가 요청할 유저 데이터의 범위를 지정
input UserPaginationInput {
    first: Int @constraint(max: 100) # 현재 커서 이후로 가져올 데이터 개수
    after: String # 현재 커서의 위치
    last: Int @constraint(max: 100) # 현재 커서 이전으로 가져올 데이터 개수
    before: String # 이전 커서의 위치
}

# 사용자 데이터 에러
type UserError {
    code: String! # 에러 코드
    message: String! # 에러 메시지
    field: String # 문제가 발생한 필드 (선택적)
}

# 유저 데이터와 페이지네이션 정보를 포함한 응답 구조
type UserConnection {
    edges: [UserEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
    # 성능 메타데이터
    queryComplexity: Int # GraphQL 라이브러리에서 제공하는 쿼리 복잡도 측정 기능
    executionTime: Int # 쿼리 실행 전후의 시간을 기록하여 계산
    errors: [UserError!] # 에러 목록
}

# 5. GraphQL 쿼리 정의
# 유저 데이터를 필터링, 정렬, 페이지네이션 조건에 맞게 조회하는 쿼리 정의
type Query {
    users(filter: UserFilter, sort: [UserSort!], pagination: UserPaginationInput!): UserConnection!
}
